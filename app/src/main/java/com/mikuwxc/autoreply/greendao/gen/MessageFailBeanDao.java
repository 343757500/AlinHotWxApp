package com.mikuwxc.autoreply.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mikuwxc.autoreply.modle.MessageFailBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_FAIL_BEAN".
*/
public class MessageFailBeanDao extends AbstractDao<MessageFailBean, Long> {

    public static final String TABLENAME = "MESSAGE_FAIL_BEAN";

    /**
     * Properties of entity MessageFailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Status = new Property(2, int.class, "status", false, "STATUS");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property MsgType = new Property(5, String.class, "msgType", false, "MSG_TYPE");
        public final static Property ConversationTime = new Property(6, long.class, "conversationTime", false, "CONVERSATION_TIME");
    }


    public MessageFailBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageFailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_FAIL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOKEN\" TEXT," + // 1: token
                "\"STATUS\" INTEGER NOT NULL ," + // 2: status
                "\"USERNAME\" TEXT," + // 3: username
                "\"CONTENT\" TEXT," + // 4: content
                "\"MSG_TYPE\" TEXT," + // 5: msgType
                "\"CONVERSATION_TIME\" INTEGER NOT NULL );"); // 6: conversationTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_FAIL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageFailBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
        stmt.bindLong(3, entity.getStatus());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(6, msgType);
        }
        stmt.bindLong(7, entity.getConversationTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageFailBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
        stmt.bindLong(3, entity.getStatus());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(6, msgType);
        }
        stmt.bindLong(7, entity.getConversationTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageFailBean readEntity(Cursor cursor, int offset) {
        MessageFailBean entity = new MessageFailBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msgType
            cursor.getLong(offset + 6) // conversationTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageFailBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConversationTime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageFailBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageFailBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageFailBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
